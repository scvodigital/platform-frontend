<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJdxcQpVKQ6HdrjnPXycUoZqsmp-Ep3l0&libraries=places&callback=initMap" async defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.11.1/typeahead.bundle.min.js"></script>
<script src="/assets/js/goodmoves/typeahead-controller.js"></script>
<script src="/assets/js/goodmoves/search-terms-controller.js"></script>
<script src="/assets/js/goodmoves/vacancies-controller.js"></script>
<script src="/assets/js/goodmoves/map-controller.js"></script>
<script>
  var $what = $('#what');
  var $distance = $('#distance');
  var $where = $('#where');
  var $map = $('#map-full');
  var $searchTerms = $('#search-terms');
  var $searchResultsInfo = $('#search-results-info');
  var $searchResultsTotal = $('#search-results-total');
  var $searchResults = $('#search-results');
  
  var terms = {
    sectors: [
      {{#each data.terms.types.aggregations.sectors.buckets}}
        { field: 'sectors', term: {{{stringify key}}} },
      {{/each}} 
    ],
    roles: [
      {{#each data.terms.types.aggregations.roles.buckets}}
        { field: 'roles', term: {{{stringify key}}} },
      {{/each}} 
    ],
    statuses: [
      {{#each data.terms.types.aggregations.statuses.buckets}}
        { field: 'statuses', term: {{{stringify key}}} },
      {{/each}} 
    ]
  };

  var typeaheadController = new TypeaheadController($what, terms, { highlight: true, minlength: 0 });
  var searchTermsController = new SearchTermsController();
  var vacanciesController = new VacanciesController();
  var mapController = null;

  typeaheadController.addListener(searchTermsController.addTerm.bind(searchTermsController));
  $distance.on('change', function(evt) { searchTermsController.setDistance($distance.val() || null); });
  searchTermsController.addListener(vacanciesController.doSearch.bind(vacanciesController));
  vacanciesController.addListener(generateMapContent);

  var autocomplete;
  function initMap() {
    autocomplete = new google.maps.places.Autocomplete($where[0], { types: ['geocode'] });
    autocomplete.addListener('place_changed', autocompleteChange);
    mapController = new MapController($map, 57.0268117, -5.5676529, 5);
    mapController.addListener(function(bounds) {
      var southWest = {
        latitude: bounds.getSouthWest().lat(),
        longitude: bounds.getSouthWest().lng() 
      };
      var northEast = {
        latitude: bounds.getNorthEast().lat(),
        longitude: bounds.getNorthEast().lng()
      };
      searchTermsController.setBounds(southWest, northEast); 
    });
    geolocate();
  }

  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        console.log('GEOLOCATION:', position);
        $distance.val('8046.72');
        searchTermsController.setDistance($distance.val());
        searchTermsController.setCenter(
          position.coords.latitude, 
          position.coords.longitude, 
          'Home');
        reverseLookup(position.coords.latitude, position.coords.longitude);
      });
    } else {
      console.log('Getting All');
      vacanciesController.doSearch({});
    }
  }

  function reverseLookup(latitude, longitude) {
    var base = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';
    var coords = latitude + ',' + longitude;
    var key = 'AIzaSyCT7vZkJdto5JoAUDx3asuHu7mHcl8UanQ';
    var url = base + coords + '&key=' + key + '&result_type=locality';
    console.log('GeoLookup URL:', url);
    $.getJSON(url, function(place) {
      if (place.results && place.results.length > 0) {
        var locality = place.results[0].formatted_address;
        $where.val(locality);
      }
    });
  }

  function autocompleteChange() {
    var place = autocomplete.getPlace();
    searchTermsController.setCenter(
      place.geometry.location.lat(),
      place.geometry.location.lng(), 
      place.formattedAddress);
  }

  function generateMapContent(vacancies, searchTerms) {
    var pinsOptions = [];
    var shapesOptions = [];

    var centerShapeOptions = getCenterShapeOptions(searchTerms);
    var centerPinOptions = getCenterPinOptions(searchTerms);
    var vacancyPinsOptions = getVacancyPinsOptions(vacancies);

    if (centerShapeOptions) {
      shapesOptions.push(centerShapeOptions);
    }

    if (centerPinOptions) {
      pinsOptions.push(centerPinOptions);
    }

    pinsOptions = pinsOptions.concat(vacancyPinsOptions);

    mapController.refreshMap(shapesOptions, pinsOptions, !searchTerms.bounds); 
  }

  function getCenterShapeOptions(searchTerms) {
    if (!searchTerms.bounds && searchTerms.center && searchTerms.distance) {
      var shapeOptions = {
        type: 'Circle',
        center: new google.maps.LatLng(searchTerms.center.latitude, searchTerms.center.longitude),
        fillOpacity: 0.2,
        fillColor: '#58a934',
        strokeOpacity: 0.4,
        strokeColor: '#58a934',
        strokeWeight: 2,
        radius: parseInt(searchTerms.distance, 10)
      }
      return shapeOptions;
    }
    return null;
  }

  function getCenterPinOptions(searchTerms) {
    if (!searchTerms.bounds && searchTerms.center) {
      var markerOptions = {
        position: new google.maps.LatLng(searchTerms.center.latitude, searchTerms.center.longitude),
        title: searchTerms.center.title,
        opacity: 0.6,
        label: {
          fontFamily: 'Fontawesome',
          text: '\uf015'
        }
      };
      var pinOptions = {
        markerOptions: markerOptions,
        infoWindowOptions: null
      };
      return pinOptions;
    }
    return null;
  }

  function getVacancyPinsOptions(vacancies) {
    var pinsOptions = [];

    for (var i = 0; i < vacancies.length; ++i) {
      var vacancy = vacancies[i];
      if (vacancy.geo_vacancy_coords) {
        for (var c = 0; c < vacancy.geo_vacancy_coords.length; ++c) {
          var coords = vacancy.geo_vacancy_coords[c] || null;
          if (coords) {
            var markerOptions = {
              position: {
                lat: coords.lat,
                lng: coords.lon
              },
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 6,
                fillColor: '#58a934',
                fillOpacity: 0.6,
                strokeColor: '#58a934',
                strokeWeight: 1
              },
              title: vacancy.title,
              opacity: 1
            };
            var infoWindowOptions = {
              content: vacancy.rendered.goodmoves_map
            };
            var pinOptions = {
              markerOptions: markerOptions,
              infoWindowOptions: infoWindowOptions
            };
            pinsOptions.push(pinOptions);
          }
        }
      }
    }

    return pinsOptions;
  }

  function addChip(field, term) {
    if (selectedTerms[field].indexOf(term) === -1) {
      selectedTerms[field].push(term);
    }
    updateTerms();
  }

  function removeChip(field, term) {
    if (selectedTerms[field].indexOf(term) > -1) {
      selectedTerms[field].splice(selectedTerms[field].indexOf(term), 1);
    }
    updateTerms();
  }

  function redrawTermChips() {
    $searchTerms.empty();
    Object.keys(selectedTerms).forEach(function(field) {
      selectedTerms[field].forEach(function(term) {
        var $chip = $('<div />')
          .addClass('mdc-chip mdc-theme--primary-bg')
          .attr({ tabindex: 0 })
          .appendTo($searchTerms);
        var chipText = $('<div />')
          .addClass('mdc-chip__text')
          .html('<strong>' + field + '</strong>: ' + term)
          .appendTo($chip);
        var chipClose = $('<i />')
          .addClass('fa fa-times-circle mdc-chip__icon mdc-chip__icon--trailing')
          .attr({ tabindex: 0, role: 'button' })
          .on('click', function() {
            removeChip(field, term);
          })
          .appendTo($chip);
      });  
    });
  }
</script>
<!--
    {{{stringify data.terms}}}
-->
